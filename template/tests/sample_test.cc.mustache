#include <gtest/gtest.h>
#include <filesystem>
{{#use_lib_semver}}
#include <{{INCLUDEDIR}}/version{{EXT.hxx}}>
{{/use_lib_semver}}

extern std::filesystem::path TESTING_data_path;

namespace {{NAMESPACE}}::testing {
	using namespace ::std::literals;
	using ::testing::TestWithParam;
	using ::testing::ValuesIn;

	struct SampleTest : TestWithParam<std::string> {};
{{#use_lib_semver}}

	TEST(SampleTest, Version) {
		EXPECT_EQ(version, get_version());
		EXPECT_TRUE(version.compatible_with(get_version()));
	}
{{/use_lib_semver}}

	TEST_P(SampleTest, AlwaysFailing) {
		auto const& arg = GetParam();
		EXPECT_FALSE(arg.empty());
	}

	static const std::string strings[] = {
	    "SA",
	    "SAMP",
	    "SAMPLE",
	    "SAMPLETE",
	    "SAMPLETEST",
	    "SAMPLETE",
	    "SAMPLE",
	    "SAMP",
	    "SA",
	};

	INSTANTIATE_TEST_SUITE_P(Strings, SampleTest, ValuesIn(strings));
}  // namespace {{NAMESPACE}}::testing
